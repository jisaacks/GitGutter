{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview A Sublime Text plug-in to show information about files in a git repository: Gutter Icons indicating inserted, modified or deleted lines Diff Popup with details about modified lines Status Bar Text with information about file and repository and provides some commands like: Goto Change to navigate between modified lines Copy from Commit to copy the orignial content from the commit Revert to Commit to revert a modified hunk to the original state in a commit Gutter Icons & Status Bar Text The icons of the default theme have the following meaning: Icon Description inserted line modified line deleted region borders ignored file untracked file Diff Popup The diff popup shows the orignal content from the commit or the differences between it and the working content. \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ The toolbar provides some commands to interact with or modify the changes. symbol meaning of the symbol \u00d7 close the popup \u2912 goto to first change \u2191 goto to previous change \u2193 goto to next change \u2248, \u2249 enable/disable difference highlighting \u2398 copy the orignial content from the commit \u27f2 revert a modified hunk to the original state in a commit To learn about how to show the diff popup and to use those commands directly please refere to the Basic Usage section.","title":"Overview"},{"location":"#overview","text":"A Sublime Text plug-in to show information about files in a git repository: Gutter Icons indicating inserted, modified or deleted lines Diff Popup with details about modified lines Status Bar Text with information about file and repository and provides some commands like: Goto Change to navigate between modified lines Copy from Commit to copy the orignial content from the commit Revert to Commit to revert a modified hunk to the original state in a commit","title":"Overview"},{"location":"#gutter-icons-status-bar-text","text":"The icons of the default theme have the following meaning: Icon Description inserted line modified line deleted region borders ignored file untracked file","title":"Gutter Icons &amp; Status Bar Text"},{"location":"#diff-popup","text":"The diff popup shows the orignal content from the commit or the differences between it and the working content. \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ The toolbar provides some commands to interact with or modify the changes. symbol meaning of the symbol \u00d7 close the popup \u2912 goto to first change \u2191 goto to previous change \u2193 goto to next change \u2248, \u2249 enable/disable difference highlighting \u2398 copy the orignial content from the commit \u27f2 revert a modified hunk to the original state in a commit To learn about how to show the diff popup and to use those commands directly please refere to the Basic Usage section.","title":"Diff Popup"},{"location":"coloring/","text":"Coloring The colors of gutter icons and the line annotation come from your color scheme file. Sublime Text Color Scheme Format <Name>.sublime-color-scheme \u24d8 requires Sublime Text 3 Build 3152+ If a color scheme file does not define the appropriate colors (or you want to edit them) \u2026 Create a Packages/User/ <Name> .sublime-color-scheme file. Copy and paste the following rules into that file. Set \"color_scheme\" user setting to <Name> .sublime-color-scheme . Tip Step 3 can be ommitted if the overridden color scheme is a *.sublime-color-scheme file. Sublime Text's UI: Select Color Scheme command can be used to activate the color scheme. If UI: Select Color Scheme is not available or the overridden color scheme is of the old *.tmTheme format use Theme Menu Switcher to select the Packages/User/ <Name> .sublime-color-scheme . User Defined Color Scheme { \"rules\" : [ { \"scope\" : \"markup.deleted.git_gutter\" , \"foreground\" : \"#F92672\" }, { \"scope\" : \"markup.changed.git_gutter\" , \"foreground\" : \"#967EFB\" }, { \"scope\" : \"markup.inserted.git_gutter\" , \"foreground\" : \"#A6E22E\" }, { \"scope\" : \"markup.ignored.git_gutter\" , \"foreground\" : \"#565656\" }, { \"scope\" : \"markup.untracked.git_gutter\" , \"foreground\" : \"#565656\" }, { \"scope\" : \"comment.line.annotation.git_gutter\" , \"foreground\" : \"#eee\" , } ] } TextMate Color Scheme Format <Name>.tmTheme \u24d8 required for Sublime Text 2 or Sublime Text 3 before Build 3151 If a color scheme file does not define the appropriate colors (or you want to edit them) \u2026 Copy the original color scheme to Packages/User/ <Name> .tmTheme . Add and modify the required color scheme entries listed below. Set \"color_scheme\" user setting to the modified file or use Theme Menu Switcher to activate it. Caution The duplicated user file will override any updates of the original color scheme. Therefore it is recommended to use Sublime Text Color Scheme format if possible. Required Color Scheme Entries <dict> <key> name </key> <string> GitGutter deleted </string> <key> scope </key> <string> markup.deleted.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #F92672 </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter inserted </string> <key> scope </key> <string> markup.inserted.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #A6E22E </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter changed </string> <key> scope </key> <string> markup.changed.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #967EFB </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter ignored </string> <key> scope </key> <string> markup.ignored.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #565656 </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter untracked </string> <key> scope </key> <string> markup.untracked.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #565656 </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter line annotation </string> <key> scope </key> <string> comment.line.annotation.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #eee </string> </dict> </dict> Supported Color Schemes Color schemes that already have support for GitGutter include: Afterglow Baara Dark Boxy Theme Brackets Color Scheme Cobalt2 Dark Room Deep Blue See Desert Night Flatland Fox Grandson of Obsidian Hitoshi Monokai Extended Monokai Pro Neon Color Scheme Neon Oblivion Perv Solarized Colour Theme Spacegray Specials Board Tomorrow Theme Underscore Colour Theme Wildlife Contact me if you want your color scheme listed here. Or do a pull request.","title":"Coloring"},{"location":"coloring/#coloring","text":"The colors of gutter icons and the line annotation come from your color scheme file.","title":"Coloring"},{"location":"coloring/#sublime-text-color-scheme-format","text":"<Name>.sublime-color-scheme \u24d8 requires Sublime Text 3 Build 3152+ If a color scheme file does not define the appropriate colors (or you want to edit them) \u2026 Create a Packages/User/ <Name> .sublime-color-scheme file. Copy and paste the following rules into that file. Set \"color_scheme\" user setting to <Name> .sublime-color-scheme . Tip Step 3 can be ommitted if the overridden color scheme is a *.sublime-color-scheme file. Sublime Text's UI: Select Color Scheme command can be used to activate the color scheme. If UI: Select Color Scheme is not available or the overridden color scheme is of the old *.tmTheme format use Theme Menu Switcher to select the Packages/User/ <Name> .sublime-color-scheme .","title":"Sublime Text Color Scheme Format"},{"location":"coloring/#user-defined-color-scheme","text":"{ \"rules\" : [ { \"scope\" : \"markup.deleted.git_gutter\" , \"foreground\" : \"#F92672\" }, { \"scope\" : \"markup.changed.git_gutter\" , \"foreground\" : \"#967EFB\" }, { \"scope\" : \"markup.inserted.git_gutter\" , \"foreground\" : \"#A6E22E\" }, { \"scope\" : \"markup.ignored.git_gutter\" , \"foreground\" : \"#565656\" }, { \"scope\" : \"markup.untracked.git_gutter\" , \"foreground\" : \"#565656\" }, { \"scope\" : \"comment.line.annotation.git_gutter\" , \"foreground\" : \"#eee\" , } ] }","title":"User Defined Color Scheme"},{"location":"coloring/#textmate-color-scheme-format","text":"<Name>.tmTheme \u24d8 required for Sublime Text 2 or Sublime Text 3 before Build 3151 If a color scheme file does not define the appropriate colors (or you want to edit them) \u2026 Copy the original color scheme to Packages/User/ <Name> .tmTheme . Add and modify the required color scheme entries listed below. Set \"color_scheme\" user setting to the modified file or use Theme Menu Switcher to activate it. Caution The duplicated user file will override any updates of the original color scheme. Therefore it is recommended to use Sublime Text Color Scheme format if possible.","title":"TextMate Color Scheme Format"},{"location":"coloring/#required-color-scheme-entries","text":"<dict> <key> name </key> <string> GitGutter deleted </string> <key> scope </key> <string> markup.deleted.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #F92672 </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter inserted </string> <key> scope </key> <string> markup.inserted.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #A6E22E </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter changed </string> <key> scope </key> <string> markup.changed.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #967EFB </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter ignored </string> <key> scope </key> <string> markup.ignored.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #565656 </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter untracked </string> <key> scope </key> <string> markup.untracked.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #565656 </string> </dict> </dict> <dict> <key> name </key> <string> GitGutter line annotation </string> <key> scope </key> <string> comment.line.annotation.git_gutter </string> <key> settings </key> <dict> <key> foreground </key> <string> #eee </string> </dict> </dict>","title":"Required Color Scheme Entries"},{"location":"coloring/#supported-color-schemes","text":"Color schemes that already have support for GitGutter include: Afterglow Baara Dark Boxy Theme Brackets Color Scheme Cobalt2 Dark Room Deep Blue See Desert Night Flatland Fox Grandson of Obsidian Hitoshi Monokai Extended Monokai Pro Neon Color Scheme Neon Oblivion Perv Solarized Colour Theme Spacegray Specials Board Tomorrow Theme Underscore Colour Theme Wildlife Contact me if you want your color scheme listed here. Or do a pull request.","title":"Supported Color Schemes"},{"location":"commands/","text":"Commands-API Goto Previous/Next Change Command Description \"git_gutter_prev_change\" Goto Previous Change \"git_gutter_next_change\" Goto Next Change Arguments Argument Values Default Description count >=1 1 The number of iterations to find destination hunk wrap False, True True enable/disable wrapping at document boundaries Example Jump forward to the next but one change and stop if no more changes follow up to the end of file. Macro { \"command\" : \"git_gutter_next_change\" , \"args\" : { \"count\" : 2 , \"wrap\" : false } } Plugin view . run_command ( \"git_gutter_next_change\" , { \"args\" : { \"count\" : 2 , \"wrap\" : False } } )","title":"Commands-API"},{"location":"commands/#commands-api","text":"","title":"Commands-API"},{"location":"commands/#goto-previousnext-change","text":"Command Description \"git_gutter_prev_change\" Goto Previous Change \"git_gutter_next_change\" Goto Next Change","title":"Goto Previous/Next Change"},{"location":"commands/#arguments","text":"Argument Values Default Description count >=1 1 The number of iterations to find destination hunk wrap False, True True enable/disable wrapping at document boundaries","title":"Arguments"},{"location":"commands/#example","text":"Jump forward to the next but one change and stop if no more changes follow up to the end of file. Macro { \"command\" : \"git_gutter_next_change\" , \"args\" : { \"count\" : 2 , \"wrap\" : false } } Plugin view . run_command ( \"git_gutter_next_change\" , { \"args\" : { \"count\" : 2 , \"wrap\" : False } } )","title":"Example"},{"location":"install/","text":"Installation Package Control It is highly recommended to install GitGutter with Package Control as it automatically installs required dependencies and keeps all packages up to date. Install Package Control if you haven't yet. Open Command Palette ( Ctrl + Shift + P for Windows/Linux, Cmd + Shift + P for Mac OS) Search for Package Control: Install Package and hit Enter . Type GitGutter and press Enter to install it. Pre-Releases If you are interested in testing bleeding edge features you can set up Package Control to install pre-releases by adding GitGutter to install_prereleases key in the Package Control.sublime-settings . \"install_prereleases\" : [ \"GitGutter\" ], GitGutter-Edge The GitGutter-Edge package is replaced by Pre-Releases . This change was made \u2026 to avoid issues with functions which depend on the package name. because branch based packages are deprecated by Package Control. to have more control about when to publish new features for testing. Tip If you don't want to wait for Pre-Releases you can pull from master branch directly. Manual Installation You can clone this repository into your Sublime Text x/Packages Mac OS cd ~/Library/Application \\ Support/Sublime \\ Text \\ 3 /Packages/ git clone git://github.com/jisaacks/GitGutter.git Linux cd ~/.config/sublime-text-3/Packages git clone git://github.com/jisaacks/GitGutter.git Windows cd \"%APPDATA%\\Sublime Text 3\\Packages\" git clone git://github.com/jisaacks/GitGutter.git Tips The git command must be available on the command line. You may need to add the directory containing git.exe to your PATH environment variable. Dependencies Some functions of GitGutter depend on the following external libraries to work properly. They are installed automatically for you by Package Control, so normally don't need to care about. But on setups without Package Control you need to make sure they are installed and available in the global namespace of Sublime Text's python interpreter on your own. markupsafe mdpopups pygments python-jinja2 python-markdown Mac OS On Mac OS you might need to install the package SublimeFixMacPath if you are using Sublime Text 2 or one of the early Sublime Text 3 dev builds. Manual Install To manually install pull from the linked repos into ST's Packages folder.","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#package-control","text":"It is highly recommended to install GitGutter with Package Control as it automatically installs required dependencies and keeps all packages up to date. Install Package Control if you haven't yet. Open Command Palette ( Ctrl + Shift + P for Windows/Linux, Cmd + Shift + P for Mac OS) Search for Package Control: Install Package and hit Enter . Type GitGutter and press Enter to install it.","title":"Package Control"},{"location":"install/#pre-releases","text":"If you are interested in testing bleeding edge features you can set up Package Control to install pre-releases by adding GitGutter to install_prereleases key in the Package Control.sublime-settings . \"install_prereleases\" : [ \"GitGutter\" ],","title":"Pre-Releases"},{"location":"install/#gitgutter-edge","text":"The GitGutter-Edge package is replaced by Pre-Releases . This change was made \u2026 to avoid issues with functions which depend on the package name. because branch based packages are deprecated by Package Control. to have more control about when to publish new features for testing. Tip If you don't want to wait for Pre-Releases you can pull from master branch directly.","title":"GitGutter-Edge"},{"location":"install/#manual-installation","text":"You can clone this repository into your Sublime Text x/Packages","title":"Manual Installation"},{"location":"install/#mac-os","text":"cd ~/Library/Application \\ Support/Sublime \\ Text \\ 3 /Packages/ git clone git://github.com/jisaacks/GitGutter.git","title":"Mac OS"},{"location":"install/#linux","text":"cd ~/.config/sublime-text-3/Packages git clone git://github.com/jisaacks/GitGutter.git","title":"Linux"},{"location":"install/#windows","text":"cd \"%APPDATA%\\Sublime Text 3\\Packages\" git clone git://github.com/jisaacks/GitGutter.git Tips The git command must be available on the command line. You may need to add the directory containing git.exe to your PATH environment variable.","title":"Windows"},{"location":"install/#dependencies","text":"Some functions of GitGutter depend on the following external libraries to work properly. They are installed automatically for you by Package Control, so normally don't need to care about. But on setups without Package Control you need to make sure they are installed and available in the global namespace of Sublime Text's python interpreter on your own. markupsafe mdpopups pygments python-jinja2 python-markdown Mac OS On Mac OS you might need to install the package SublimeFixMacPath if you are using Sublime Text 2 or one of the early Sublime Text 3 dev builds. Manual Install To manually install pull from the linked repos into ST's Packages folder.","title":"Dependencies"},{"location":"license/","text":"Released under the MIT license. Copyright \u00a9 2012 - \u2026 John Isaacks & DeathAxe Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"settings/","text":"Settings Package settings are accessed via Main Menu or Command Palette. Control Description Menu Main > Preferences > Package Settings > GitGutter Command Palette Preferences: GitGutter Settings Warning Default settings should not be modified, as they are overwritten when GitGutter updates. Copy the relevant settings into GitGutter's user settings file instead. Syntax, User, Project and View Settings All GitGutter settings can be placed in any of Sublime Text's settings files to provide syntax-, user-, project- or view-specific setups. The setting keys found in the GitGutter.sublime-settings need to be prefixed using git_gutter_ to do that. Each of those settings overrides the value from the GitGutter.sublime-settings. To modify GitGutter settings for an open Project just open Project > Edit Project menu and add the settings key as shown. { \"folders\" : [ { \"path\" : \"src\" } ], \"settings\" : { // git_binary is the only setting not being prefixed \"git_binary\" : \"/path/to/project/specific/git\" // git_gutter settings \"git_gutter_live_mode\" : false , \"git_gutter_ignore_whitespace\" : \"space\" } } Preferences All correctly prefixed settings can be placed into Preferences.sublime-settings instead of GitGutter.sublime-settings . Plugin-API Settings can be modified temporarily per view by calls like view.settings().set(\"git_gutter_enable\", False) General Enable or Disable Evaluation \"git_gutter_enable\" : true GitGutter evaluates changes every time the file is loaded, saved, activated or modified by default. Set false to disable evaluation and hide all gutter icons, status message and minimap markers. Caution This setting must be set as syntax- user- project- or view-specific setting! It is ignored when put into GitGutter.sublime-settings . Git Binary \"git_binary\" : \"\" GitGutter looks for the git binary in the PATH environment variable by default. The setting can be used to specify the path to a custom git installation which is not registered to PATH . run git via W indows S ubsystem for L inux (WSL) on Windows 10 by setting up a unix like path. The value may be either a direct string to a git binary: Windows \"git_binary\" : \"E:\\\\Portable\\\\git\\\\bin\\\\git.exe\" Linux/OSX/WSL \"git_binary\" : \"/usr/bin/git\" or it may be a dictionary keyed off what sublime.platform() returns, so it may be customized on a per-platform basis: \"git_binary\" : { \"default\" : \"\" , \"linux\" : \"/usr/bin/git\" , \"osx\" : \"/usr/bin/git\" , \"windows\" : \"C:/Program Files/Git/cmd/git.exe\" } Tips It is valid to use environment variables in the setting value, and they will be expanded appropriately. In a POSIX environment you can run which git to find the path to git if it is in your path. On Windows, you can use where git to do the equivalent. Environment Variables \"env\" : { \"GIT_OPTIONAL_LOCKS\" : 0 } With the \"env\" dictionary custom environment variables can be passed to git. The values overwrite the global environment variables Sublime Text is running with. Tips Keys with value None are removed from the local environment. The \"git_gutter_env\" defined per view or project hides the global \"env\" dictionary. Make sure to use the correct separator characters of your OS, if you manipulate the $PATH . Compare Against \"compare_against\" : \"HEAD\" GitGutter compares the content of the view against the HEAD of the checked out branch by default. To change this default behaviour the compare_against setting can be changed to any tag, branch or commit hash git understands. Tips This setting is overridden by the Compare Against Command Diff Algorithm \"diff_algorithm\" : \"patience\" Set diff_algorithm to one of the following values to change this behaviour. value description \"default\" The basic greedy diff algorithm. Currently, this is the default. \"minimal\" Spend extra time to make sure the smallest possible diff is produced. \"patience\" Use \"patience diff\" algorithm when generating patches. \"histogram\" This algorithm extends the patience algorithm to \"support low-occurrence common elements\". Ignore Whitespace \"ignore_whitespace\" : \"none\" GitGutter includes all whitespace when evaluating modifications by default. Set ignore_whitespace to one of the following values to change this behaviour. value description \"none\" don't ignore any whitespace changes \"cr\" ignore the carriage return at the end of lines (git 2.18+) \"eol\" ignore whitespace changes at the end of lines \"space\" ignore changed amount of whitespace \"all\" ignore all whitespace Diff Gutter Debounce Delay \"debounce_delay\" : 1000 Delays update of gutter icons by the following amount (in milliseconds). Useful for performance issues. Default 1000 (1 second). Focus Change Mode \"focus_change_mode\" : true GitGutter evaluates changes every time a view gets the focus by default. Set false to disable evaluation when changing views. Tips This setting has effect with \"live_mode\": false only. GitGutter always evaluates changes after loading and saving a document. Live Mode \"live_mode\" : true GitGutter evaluates changes every time the file is modified by default. Set false to disable evaluation after each input. Tips GitGutter always evaluates changes after loading and saving a document. Protected Regions To avoid GitGutter from overriding more important gutter icons a list of protected regions can be created, which GitGutter won't add gutter icons to. \"protected_regions\" : [ \"sublimelinter-warning-gutter-marks\" , \"sublimelinter-error-gutter-marks\" , \"bookmarks\" ], Tips You will need to figure out the names of the regions to protect. Show Markers on Untracked Files \"show_markers_on_untracked_file\" : true GitGutter shows icons on each line for untracked and ignored files by default. Set to false to hide those icons. Scopes You may need to add scopes ( markup.ignored.git_gutter and markup.untracked.git_gutter ) to your color scheme to color the icons. Show Markers in Minimap \"show_in_minimap\" : 1 GitGutter shows diffs in the minimap on Sublime Text 3 by default. Change show_in_minimap to one of the following values to disable this feature or change the width of the markers. value description =0 hide markers >1 width of markers -1 highlight full line Themes \"theme\" : \"Default.gitgutter-theme\" GitGutter provides support for custom gutter icons and diff popup style sheets coming with theme packages. Set theme to a valid theme file name to activate a different icon set. GitGutter includes following themes: Bars.gitgutter-theme Bars Thin.gitgutter-theme Default.gitgutter-theme Default HiDPI.gitgutter-theme ( for ST2 and old ST3 dev builds ) Custom Themes To provide a custom theme developers need to add a folder with all required icons and optionally a gitgutter_popup.css file to their package. An empty JSON file <ThemeName>.gitgutter-theme must exist to mark this folder a resource for GitGutter icons. Diff Popup \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ Enable Hover \"enable_hover_diff_popup\" : true GitGutter shows a diff popup, when hovering over changes in the gutter. Set false to disable the hovering feature. Tips You can still open it with a key binding or command palette . Default Mode \"diff_popup_default_mode\" : \"default\" The popup displays the previous state of the content under the cursor by \"default\" but can be set to \"diff\" to highlight the differences between the git state and the editor state. Protected Regions \"diff_popup_protected_regions\" : [ \"sublime_linter.protected_regions\" ], To avoid GitGutter's diff popup from figting with other popups while hovering the gutter a list of protected regions can be created. If the line under the mouse cursor is occupied by one of these regions, no diff popup is displayed. Tips You will need to figure out the names of the regions to protect. You can still open it with a key binding or command palette . Stylesheet The default style of the Diff Popup is defined by mdpopups \u00b4s default.css and GitGutter\u00b4s gitgutter_popup.css . Both try their best to adapt the popup\u00b4s apeareance to the active color scheme automatically. The apeareance can be customized by an embedded stylesheet in the color scheme editing the Packages/User/mdpopups.css editing the Packages/User/gitgutter_popup.css Edit gitgutter_popup.css GitGutter\u00b4s style settings are accessible via Menu: Main > Preferences > Package Settings > GitGutter > Popup Stylesheet Command Palette : Preferences: GitGutter Popup Stylesheet Syntax Highlighting The popup uses the mdpopups library to render its content, which includes syntax highlighting. Please refer to mdpopups settings documentation for settings to change this behaviour. Line Annotation The active line of the active view is annotated with information about who changed it when. Its behaviour and the look & feel can be modified with the following settings. Show Line Annotation \"show_line_annotation\" : \"auto\" \u24d8 requires Sublime Text 3 Build 3124+ GitGutter displays information about the author of a change right next to the line using a phantom text if word wrapping is disabled. The behaviour can be modified by setting show_line_annotation to one of the following values: Value Description \"auto\" show line annotation if word wrap is disabled (default) true always show line annotation false never show line annotation Line Annotation Template \"line_annotation_text\" : \"{{line_author}} ({{line_author_age}}) \u00b7 {{line_summary}}\" The Line Annotation is rendered by jinja2 using a fully customizable template from the line_annotation_text setting. disable jinja2 Set \"line_annotation_text\": null to disable jinja2 engine. The message is formatted with a fixed template which is also used if jinja2 is not available. multiline templates The setting can organized as an array of strings for better readability. It is joined and then passed to jinja2 . Example \"line_annotation_text\" : [ \"{{line_author}}\" , \" ({{line_author_age}})\" , \" \u00b7 {{line_summary}}\" ] The following variables can be used to customize the template: Variable Description {{line_author}} the author, who introduced the change {{line_author_mail}} the e-mail address of the author {{line_author_age}} the time elapsed since the change {{line_author_time}} the time string of the change {{line_author_tz}} the timezone string of the change {{line_commit}} the hash of the changing committing {{line_committer}} the committer, who added the change to the repo {{line_committer_mail}} the e-mail address of the committer {{line_committer_age}} the time elapsed since the change {{line_committer_time} the time string of commit {{line_committer_tz} the timezone string of commit {{line_summary}} the first line of the commit message {{line_previous}} the hash of the previous commit Line Annotation Ruler \"line_annotation_ruler\" : false The Line Annotation is aligned to the end of a line with a predefined distance by default. To align the Line Annotation to the first ruler instead, you can set line_annotation_ruler to 1 . A value of 2 aligns the text to the second ruler if available and so forth. Line Annotation Ignore Whitespace \"line_annotation_ignore_whitespace\" : false Line annotations display any change including whitespace by default. Set to true to ignore whitespace when comparing the parent\u2019s version and the child\u2019s to find where the lines came from. Status Bar Text Show Status Bar Text \"show_status_bar_text\" : true GitGutter displays status information about open files in the status bar by default. Set to false to hide the information. Status Bar Text Template \"status_bar_text\" : [ \"{% if repo and branch %}\" , \"{% if not st_git_status %}\" , \"{{repo}}/{{branch}}\" , \"{% if added_files + deleted_files + modified_files > 0 %}*{% endif %}, \" , \"{% endif %}\" , \"{% if compare not in ('HEAD', branch, None) %}Comparing against {{compare}}, {% endif %}\" , \"{% if state %}File is {{state}}{% endif %}\" , \"{% if deleted > 0 %}, {{deleted}}-{% endif %}\" , \"{% if inserted > 0 %}, {{inserted}}+{% endif %}\" , \"{% if modified > 0 %}, {{modified}}\u2260{% endif %}\" , \"{% if line_author and line_author_age %}, \u27e2 {{line_author}} ({{line_author_age}}){% endif %}\" , \"{% endif %}\" ] The Status Bar Text is rendered using a fully customizable template from status_bar_text . The setting is organized as an array of strings for better readability. It is joined and then passed to jinja2 . disable jinja2 Set \"line_annotation_text\": null to disable jinja2 engine. The message is formatted with a fixed template which is also used if jinja2 is not available. The following variables can be used to customize the template: Variable Description {{st_git_status}} reflects \"show_git_status\": true in Preferences of ST 3189+ {{repo}} repository name / folder name containing the .git directory {{branch}} checked out branch you are working on {{remote}} tracked remote of current branch you are working on or None {{ahead}} number of commits the local branch is ahead of remote {{behind}} number of commits the local branch is behind remote {{added_files}} number of untracked files added to working tree {{deleted_files}} number of files deleted from working tree {{modified_files}} number of modified files in the working tree {{staged_files}} number of files in the staging area {{compare}} commit/branch/HEAD the file is compared to {{state}} One of committed/modified/ignored/untracked {{deleted}} number of deleted regions {{inserted}} number of inserted lines {{modified}} number of modified lines {{line_author}} the author, who introduced the change {{line_author_mail}} the e-mail address of the author {{line_author_age}} the time elapsed since the change {{line_author_time}} the time string of the change {{line_author_tz}} the timezone string of the change {{line_commit}} the hash of the changing committing {{line_committer}} the committer, who added the change to the repo {{line_committer_mail}} the e-mail address of the committer {{line_committer_age}} the time elapsed since the change {{line_committer_time} the time string of commit {{line_committer_tz} the timezone string of commit {{line_summary}} the first line of the commit message {{line_previous}} the hash of the previous commit","title":"Settings"},{"location":"settings/#settings","text":"Package settings are accessed via Main Menu or Command Palette. Control Description Menu Main > Preferences > Package Settings > GitGutter Command Palette Preferences: GitGutter Settings Warning Default settings should not be modified, as they are overwritten when GitGutter updates. Copy the relevant settings into GitGutter's user settings file instead.","title":"Settings"},{"location":"settings/#syntax-user-project-and-view-settings","text":"All GitGutter settings can be placed in any of Sublime Text's settings files to provide syntax-, user-, project- or view-specific setups. The setting keys found in the GitGutter.sublime-settings need to be prefixed using git_gutter_ to do that. Each of those settings overrides the value from the GitGutter.sublime-settings. To modify GitGutter settings for an open Project just open Project > Edit Project menu and add the settings key as shown. { \"folders\" : [ { \"path\" : \"src\" } ], \"settings\" : { // git_binary is the only setting not being prefixed \"git_binary\" : \"/path/to/project/specific/git\" // git_gutter settings \"git_gutter_live_mode\" : false , \"git_gutter_ignore_whitespace\" : \"space\" } } Preferences All correctly prefixed settings can be placed into Preferences.sublime-settings instead of GitGutter.sublime-settings . Plugin-API Settings can be modified temporarily per view by calls like view.settings().set(\"git_gutter_enable\", False)","title":"Syntax, User, Project and View Settings"},{"location":"settings/#general","text":"","title":"General"},{"location":"settings/#enable-or-disable-evaluation","text":"\"git_gutter_enable\" : true GitGutter evaluates changes every time the file is loaded, saved, activated or modified by default. Set false to disable evaluation and hide all gutter icons, status message and minimap markers. Caution This setting must be set as syntax- user- project- or view-specific setting! It is ignored when put into GitGutter.sublime-settings .","title":"Enable or Disable Evaluation"},{"location":"settings/#git-binary","text":"\"git_binary\" : \"\" GitGutter looks for the git binary in the PATH environment variable by default. The setting can be used to specify the path to a custom git installation which is not registered to PATH . run git via W indows S ubsystem for L inux (WSL) on Windows 10 by setting up a unix like path. The value may be either a direct string to a git binary:","title":"Git Binary"},{"location":"settings/#windows","text":"\"git_binary\" : \"E:\\\\Portable\\\\git\\\\bin\\\\git.exe\"","title":"Windows"},{"location":"settings/#linuxosxwsl","text":"\"git_binary\" : \"/usr/bin/git\" or it may be a dictionary keyed off what sublime.platform() returns, so it may be customized on a per-platform basis: \"git_binary\" : { \"default\" : \"\" , \"linux\" : \"/usr/bin/git\" , \"osx\" : \"/usr/bin/git\" , \"windows\" : \"C:/Program Files/Git/cmd/git.exe\" } Tips It is valid to use environment variables in the setting value, and they will be expanded appropriately. In a POSIX environment you can run which git to find the path to git if it is in your path. On Windows, you can use where git to do the equivalent.","title":"Linux/OSX/WSL"},{"location":"settings/#environment-variables","text":"\"env\" : { \"GIT_OPTIONAL_LOCKS\" : 0 } With the \"env\" dictionary custom environment variables can be passed to git. The values overwrite the global environment variables Sublime Text is running with. Tips Keys with value None are removed from the local environment. The \"git_gutter_env\" defined per view or project hides the global \"env\" dictionary. Make sure to use the correct separator characters of your OS, if you manipulate the $PATH .","title":"Environment Variables"},{"location":"settings/#compare-against","text":"\"compare_against\" : \"HEAD\" GitGutter compares the content of the view against the HEAD of the checked out branch by default. To change this default behaviour the compare_against setting can be changed to any tag, branch or commit hash git understands. Tips This setting is overridden by the Compare Against Command","title":"Compare Against"},{"location":"settings/#diff-algorithm","text":"\"diff_algorithm\" : \"patience\" Set diff_algorithm to one of the following values to change this behaviour. value description \"default\" The basic greedy diff algorithm. Currently, this is the default. \"minimal\" Spend extra time to make sure the smallest possible diff is produced. \"patience\" Use \"patience diff\" algorithm when generating patches. \"histogram\" This algorithm extends the patience algorithm to \"support low-occurrence common elements\".","title":"Diff Algorithm"},{"location":"settings/#ignore-whitespace","text":"\"ignore_whitespace\" : \"none\" GitGutter includes all whitespace when evaluating modifications by default. Set ignore_whitespace to one of the following values to change this behaviour. value description \"none\" don't ignore any whitespace changes \"cr\" ignore the carriage return at the end of lines (git 2.18+) \"eol\" ignore whitespace changes at the end of lines \"space\" ignore changed amount of whitespace \"all\" ignore all whitespace","title":"Ignore Whitespace"},{"location":"settings/#diff-gutter","text":"","title":"Diff Gutter"},{"location":"settings/#debounce-delay","text":"\"debounce_delay\" : 1000 Delays update of gutter icons by the following amount (in milliseconds). Useful for performance issues. Default 1000 (1 second).","title":"Debounce Delay"},{"location":"settings/#focus-change-mode","text":"\"focus_change_mode\" : true GitGutter evaluates changes every time a view gets the focus by default. Set false to disable evaluation when changing views. Tips This setting has effect with \"live_mode\": false only. GitGutter always evaluates changes after loading and saving a document.","title":"Focus Change Mode"},{"location":"settings/#live-mode","text":"\"live_mode\" : true GitGutter evaluates changes every time the file is modified by default. Set false to disable evaluation after each input. Tips GitGutter always evaluates changes after loading and saving a document.","title":"Live Mode"},{"location":"settings/#protected-regions","text":"To avoid GitGutter from overriding more important gutter icons a list of protected regions can be created, which GitGutter won't add gutter icons to. \"protected_regions\" : [ \"sublimelinter-warning-gutter-marks\" , \"sublimelinter-error-gutter-marks\" , \"bookmarks\" ], Tips You will need to figure out the names of the regions to protect.","title":"Protected Regions"},{"location":"settings/#show-markers-on-untracked-files","text":"\"show_markers_on_untracked_file\" : true GitGutter shows icons on each line for untracked and ignored files by default. Set to false to hide those icons. Scopes You may need to add scopes ( markup.ignored.git_gutter and markup.untracked.git_gutter ) to your color scheme to color the icons.","title":"Show Markers on Untracked Files"},{"location":"settings/#show-markers-in-minimap","text":"\"show_in_minimap\" : 1 GitGutter shows diffs in the minimap on Sublime Text 3 by default. Change show_in_minimap to one of the following values to disable this feature or change the width of the markers. value description =0 hide markers >1 width of markers -1 highlight full line","title":"Show Markers in Minimap"},{"location":"settings/#themes","text":"\"theme\" : \"Default.gitgutter-theme\" GitGutter provides support for custom gutter icons and diff popup style sheets coming with theme packages. Set theme to a valid theme file name to activate a different icon set. GitGutter includes following themes: Bars.gitgutter-theme Bars Thin.gitgutter-theme Default.gitgutter-theme Default HiDPI.gitgutter-theme ( for ST2 and old ST3 dev builds ) Custom Themes To provide a custom theme developers need to add a folder with all required icons and optionally a gitgutter_popup.css file to their package. An empty JSON file <ThemeName>.gitgutter-theme must exist to mark this folder a resource for GitGutter icons.","title":"Themes"},{"location":"settings/#diff-popup","text":"\u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+","title":"Diff Popup"},{"location":"settings/#enable-hover","text":"\"enable_hover_diff_popup\" : true GitGutter shows a diff popup, when hovering over changes in the gutter. Set false to disable the hovering feature. Tips You can still open it with a key binding or command palette .","title":"Enable Hover"},{"location":"settings/#default-mode","text":"\"diff_popup_default_mode\" : \"default\" The popup displays the previous state of the content under the cursor by \"default\" but can be set to \"diff\" to highlight the differences between the git state and the editor state.","title":"Default Mode"},{"location":"settings/#protected-regions_1","text":"\"diff_popup_protected_regions\" : [ \"sublime_linter.protected_regions\" ], To avoid GitGutter's diff popup from figting with other popups while hovering the gutter a list of protected regions can be created. If the line under the mouse cursor is occupied by one of these regions, no diff popup is displayed. Tips You will need to figure out the names of the regions to protect. You can still open it with a key binding or command palette .","title":"Protected Regions"},{"location":"settings/#stylesheet","text":"The default style of the Diff Popup is defined by mdpopups \u00b4s default.css and GitGutter\u00b4s gitgutter_popup.css . Both try their best to adapt the popup\u00b4s apeareance to the active color scheme automatically. The apeareance can be customized by an embedded stylesheet in the color scheme editing the Packages/User/mdpopups.css editing the Packages/User/gitgutter_popup.css Edit gitgutter_popup.css GitGutter\u00b4s style settings are accessible via Menu: Main > Preferences > Package Settings > GitGutter > Popup Stylesheet Command Palette : Preferences: GitGutter Popup Stylesheet","title":"Stylesheet"},{"location":"settings/#syntax-highlighting","text":"The popup uses the mdpopups library to render its content, which includes syntax highlighting. Please refer to mdpopups settings documentation for settings to change this behaviour.","title":"Syntax Highlighting"},{"location":"settings/#line-annotation","text":"The active line of the active view is annotated with information about who changed it when. Its behaviour and the look & feel can be modified with the following settings.","title":"Line Annotation"},{"location":"settings/#show-line-annotation","text":"\"show_line_annotation\" : \"auto\" \u24d8 requires Sublime Text 3 Build 3124+ GitGutter displays information about the author of a change right next to the line using a phantom text if word wrapping is disabled. The behaviour can be modified by setting show_line_annotation to one of the following values: Value Description \"auto\" show line annotation if word wrap is disabled (default) true always show line annotation false never show line annotation","title":"Show Line Annotation"},{"location":"settings/#line-annotation-template","text":"\"line_annotation_text\" : \"{{line_author}} ({{line_author_age}}) \u00b7 {{line_summary}}\" The Line Annotation is rendered by jinja2 using a fully customizable template from the line_annotation_text setting. disable jinja2 Set \"line_annotation_text\": null to disable jinja2 engine. The message is formatted with a fixed template which is also used if jinja2 is not available. multiline templates The setting can organized as an array of strings for better readability. It is joined and then passed to jinja2 . Example \"line_annotation_text\" : [ \"{{line_author}}\" , \" ({{line_author_age}})\" , \" \u00b7 {{line_summary}}\" ] The following variables can be used to customize the template: Variable Description {{line_author}} the author, who introduced the change {{line_author_mail}} the e-mail address of the author {{line_author_age}} the time elapsed since the change {{line_author_time}} the time string of the change {{line_author_tz}} the timezone string of the change {{line_commit}} the hash of the changing committing {{line_committer}} the committer, who added the change to the repo {{line_committer_mail}} the e-mail address of the committer {{line_committer_age}} the time elapsed since the change {{line_committer_time} the time string of commit {{line_committer_tz} the timezone string of commit {{line_summary}} the first line of the commit message {{line_previous}} the hash of the previous commit","title":"Line Annotation Template"},{"location":"settings/#line-annotation-ruler","text":"\"line_annotation_ruler\" : false The Line Annotation is aligned to the end of a line with a predefined distance by default. To align the Line Annotation to the first ruler instead, you can set line_annotation_ruler to 1 . A value of 2 aligns the text to the second ruler if available and so forth.","title":"Line Annotation Ruler"},{"location":"settings/#line-annotation-ignore-whitespace","text":"\"line_annotation_ignore_whitespace\" : false Line annotations display any change including whitespace by default. Set to true to ignore whitespace when comparing the parent\u2019s version and the child\u2019s to find where the lines came from.","title":"Line Annotation Ignore Whitespace"},{"location":"settings/#status-bar-text","text":"","title":"Status Bar Text"},{"location":"settings/#show-status-bar-text","text":"\"show_status_bar_text\" : true GitGutter displays status information about open files in the status bar by default. Set to false to hide the information.","title":"Show Status Bar Text"},{"location":"settings/#status-bar-text-template","text":"\"status_bar_text\" : [ \"{% if repo and branch %}\" , \"{% if not st_git_status %}\" , \"{{repo}}/{{branch}}\" , \"{% if added_files + deleted_files + modified_files > 0 %}*{% endif %}, \" , \"{% endif %}\" , \"{% if compare not in ('HEAD', branch, None) %}Comparing against {{compare}}, {% endif %}\" , \"{% if state %}File is {{state}}{% endif %}\" , \"{% if deleted > 0 %}, {{deleted}}-{% endif %}\" , \"{% if inserted > 0 %}, {{inserted}}+{% endif %}\" , \"{% if modified > 0 %}, {{modified}}\u2260{% endif %}\" , \"{% if line_author and line_author_age %}, \u27e2 {{line_author}} ({{line_author_age}}){% endif %}\" , \"{% endif %}\" ] The Status Bar Text is rendered using a fully customizable template from status_bar_text . The setting is organized as an array of strings for better readability. It is joined and then passed to jinja2 . disable jinja2 Set \"line_annotation_text\": null to disable jinja2 engine. The message is formatted with a fixed template which is also used if jinja2 is not available. The following variables can be used to customize the template: Variable Description {{st_git_status}} reflects \"show_git_status\": true in Preferences of ST 3189+ {{repo}} repository name / folder name containing the .git directory {{branch}} checked out branch you are working on {{remote}} tracked remote of current branch you are working on or None {{ahead}} number of commits the local branch is ahead of remote {{behind}} number of commits the local branch is behind remote {{added_files}} number of untracked files added to working tree {{deleted_files}} number of files deleted from working tree {{modified_files}} number of modified files in the working tree {{staged_files}} number of files in the staging area {{compare}} commit/branch/HEAD the file is compared to {{state}} One of committed/modified/ignored/untracked {{deleted}} number of deleted regions {{inserted}} number of inserted lines {{modified}} number of modified lines {{line_author}} the author, who introduced the change {{line_author_mail}} the e-mail address of the author {{line_author_age}} the time elapsed since the change {{line_author_time}} the time string of the change {{line_author_tz}} the timezone string of the change {{line_commit}} the hash of the changing committing {{line_committer}} the committer, who added the change to the repo {{line_committer_mail}} the e-mail address of the committer {{line_committer_age}} the time elapsed since the change {{line_committer_time} the time string of commit {{line_committer_tz} the timezone string of commit {{line_summary}} the first line of the commit message {{line_previous}} the hash of the previous commit","title":"Status Bar Text Template"},{"location":"troubleshooting/","text":"Troubleshooting GitGutter requires Sublime Text 3.1.1 (build 3176) or newer. GitGutter 1.10.x is available for backward compatibility with Sublime Text 2, but will not receive updates anymore. Is git working? The most common reasons for the icons to not show up are: GitGutter can't find the git executable on PATH . On Mac OS the \"Xcode/iOS license\" needs to be agreed to make git work. To check, whether git is found and working properly \u2026 Open the command palette via Main > Tools > Command Palettee \u2026 or key binding Ctrl + Shift + P for Windows/Linux or \u2318 + \u21e7 + P for Mac OS Search for GitGutter: Support Info and hit Enter . A dialog is displayed with version information of Sublime Text and all packages being used by GitGutter. If git was found on PATH and is working properly, the dialog contains a line like git version 2.10.0.windows.1 . Otherwise some more detailed information about the reason for git not to work may be found in the console window, then. If not try again with \"debug\": true added to the GitGutter settings. Git works in shell but is not found by GitGutter! Some operating systems (especially Mac OS) may not run Sublime Text within the login shell. As a result Sublime Text and all its packages don't have access to some of the user's environment variables including the PATH to git. In some cases the package providing git (e.g. Xcode) simply requires some user confirmation due to license changes and thus simply refuses to run git. Sublime Text 2 may need the SublimeFixMacPath package to the PATH environment from the login shell. If git is working there, it will be found by GitGutter, too, then. GitGutter can work with a certain binary, too. Please read the section on the git_binary setting. GitGutter no longer works after upgrade Please check if GitGutter works after restarting Sublime Text. All modules of GitGutter were moved to modules sub directory to present them to Sublime Text as one package to avoid creating multiple instances of some modules and objects and reduce package loading time by about 50%. GitGutter handles Package Control's post_upgrade event to reload all its submodules once after upgrading. In rare cases some modules might not be recovered properly and thus require a restart of ST to make GitGutter work again. GitGutter keeps completely quiet GitGutter is installed and loads properly without any error messages printed to Sublime Text's console, but keeps completely disabled in some or all repositories. Neither gutter icons nor messages are displayed in the status bar. GitGutter is designed to keep quiet in the following situations when evaluation is expected useless: disabled in Preferences.sublime-settings , project settings or view settings ( \"git_gutter_enabled\": false ) the current view shows a file which is not part of a git working tree is not attached to a window is read only is a scratch view is a widget ( \"is_widget\": true ) is a REPL view ( \"repl\": true ) has \"Hexadecimal\" encoding Please check if one of those states was applied to your view by one of your packages. debug With \"debug\": true the reason for GitGutter to keep quite is printed to console. known issues ConvertToUTF8 package is known to mark views as scratch during conversion without reverting that state reliably. GitGutter doesn't add gutter icons any more This is expected behaviour if GitGutter runs on Sublime Text 3189+ with \"mini_diff\": true or \"mini_diff\": \"auto\" being set in Preferences.sublime-settings in order to not interfere with the new Incremental Diff feature of Sublime Text 3.2+. In this situation GitGutter leaves the gutter to other plugins like SublimeLinter. We don't need two indicators about modifications at a time. GitGutter still works in the background to add modification indicators to the minimap as @sublimehq decided not to add this feature to the Incremental Diff . If you prefer GitGutter's file modification icons in the gutter, you need to set \"mini_diff\": false in your Preferences.sublime-settings . GitGutter doesn't show the repo/branch name in status bar The default Status Bar Text Template was modified to draw the repository name and the branch name only if the git integration of Sublime Text 3.2+ is disabled. If you still want to see them without disabling the git integration, you need to modify the Status Bar Text Template . GitGutter doesn't recognize working tree git 2.5+ allows configurations with .git directory not being located in the working tree root. You may also checkout multiple working trees from one repository. No matter which configuration is used, GitGutter expects a .git directory or a .git file in the root of a working tree to recognize it as such. If the .git directory is not located in the working tree root the following steps are required. Configure the repository to point to the custom working tree by calling git config --add core.worktree <path_to_worktree> This step is required to let git use the custom working tree. Create a .git file in the root of the working tree which points to the repository's database. \u24d8 The .git file must contain the line gitdir: <path_to_git_dir> . The file can be created using the following shell commands. Linux / Mac OS echo \"gitdir: $( git rev-parse --git-dir ) \" > .git Windows for /f %i in ( 'git rev-parse --git-dir' ) do set gitdir = %i echo gitdir: %gitdir% > .git","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"GitGutter requires Sublime Text 3.1.1 (build 3176) or newer. GitGutter 1.10.x is available for backward compatibility with Sublime Text 2, but will not receive updates anymore.","title":"Troubleshooting"},{"location":"troubleshooting/#is-git-working","text":"The most common reasons for the icons to not show up are: GitGutter can't find the git executable on PATH . On Mac OS the \"Xcode/iOS license\" needs to be agreed to make git work. To check, whether git is found and working properly \u2026 Open the command palette via Main > Tools > Command Palettee \u2026 or key binding Ctrl + Shift + P for Windows/Linux or \u2318 + \u21e7 + P for Mac OS Search for GitGutter: Support Info and hit Enter . A dialog is displayed with version information of Sublime Text and all packages being used by GitGutter. If git was found on PATH and is working properly, the dialog contains a line like git version 2.10.0.windows.1 . Otherwise some more detailed information about the reason for git not to work may be found in the console window, then. If not try again with \"debug\": true added to the GitGutter settings.","title":"Is git working?"},{"location":"troubleshooting/#git-works-in-shell-but-is-not-found-by-gitgutter","text":"Some operating systems (especially Mac OS) may not run Sublime Text within the login shell. As a result Sublime Text and all its packages don't have access to some of the user's environment variables including the PATH to git. In some cases the package providing git (e.g. Xcode) simply requires some user confirmation due to license changes and thus simply refuses to run git. Sublime Text 2 may need the SublimeFixMacPath package to the PATH environment from the login shell. If git is working there, it will be found by GitGutter, too, then. GitGutter can work with a certain binary, too. Please read the section on the git_binary setting.","title":"Git works in shell but is not found by GitGutter!"},{"location":"troubleshooting/#gitgutter-no-longer-works-after-upgrade","text":"Please check if GitGutter works after restarting Sublime Text. All modules of GitGutter were moved to modules sub directory to present them to Sublime Text as one package to avoid creating multiple instances of some modules and objects and reduce package loading time by about 50%. GitGutter handles Package Control's post_upgrade event to reload all its submodules once after upgrading. In rare cases some modules might not be recovered properly and thus require a restart of ST to make GitGutter work again.","title":"GitGutter no longer works after upgrade"},{"location":"troubleshooting/#gitgutter-keeps-completely-quiet","text":"GitGutter is installed and loads properly without any error messages printed to Sublime Text's console, but keeps completely disabled in some or all repositories. Neither gutter icons nor messages are displayed in the status bar. GitGutter is designed to keep quiet in the following situations when evaluation is expected useless: disabled in Preferences.sublime-settings , project settings or view settings ( \"git_gutter_enabled\": false ) the current view shows a file which is not part of a git working tree is not attached to a window is read only is a scratch view is a widget ( \"is_widget\": true ) is a REPL view ( \"repl\": true ) has \"Hexadecimal\" encoding Please check if one of those states was applied to your view by one of your packages. debug With \"debug\": true the reason for GitGutter to keep quite is printed to console. known issues ConvertToUTF8 package is known to mark views as scratch during conversion without reverting that state reliably.","title":"GitGutter keeps completely quiet"},{"location":"troubleshooting/#gitgutter-doesnt-add-gutter-icons-any-more","text":"This is expected behaviour if GitGutter runs on Sublime Text 3189+ with \"mini_diff\": true or \"mini_diff\": \"auto\" being set in Preferences.sublime-settings in order to not interfere with the new Incremental Diff feature of Sublime Text 3.2+. In this situation GitGutter leaves the gutter to other plugins like SublimeLinter. We don't need two indicators about modifications at a time. GitGutter still works in the background to add modification indicators to the minimap as @sublimehq decided not to add this feature to the Incremental Diff . If you prefer GitGutter's file modification icons in the gutter, you need to set \"mini_diff\": false in your Preferences.sublime-settings .","title":"GitGutter doesn't add gutter icons any more"},{"location":"troubleshooting/#gitgutter-doesnt-show-the-repobranch-name-in-status-bar","text":"The default Status Bar Text Template was modified to draw the repository name and the branch name only if the git integration of Sublime Text 3.2+ is disabled. If you still want to see them without disabling the git integration, you need to modify the Status Bar Text Template .","title":"GitGutter doesn't show the repo/branch name in status bar"},{"location":"troubleshooting/#gitgutter-doesnt-recognize-working-tree","text":"git 2.5+ allows configurations with .git directory not being located in the working tree root. You may also checkout multiple working trees from one repository. No matter which configuration is used, GitGutter expects a .git directory or a .git file in the root of a working tree to recognize it as such. If the .git directory is not located in the working tree root the following steps are required. Configure the repository to point to the custom working tree by calling git config --add core.worktree <path_to_worktree> This step is required to let git use the custom working tree. Create a .git file in the root of the working tree which points to the repository's database. \u24d8 The .git file must contain the line gitdir: <path_to_git_dir> . The file can be created using the following shell commands. Linux / Mac OS echo \"gitdir: $( git rev-parse --git-dir ) \" > .git Windows for /f %i in ( 'git rev-parse --git-dir' ) do set gitdir = %i echo gitdir: %gitdir% > .git","title":"GitGutter doesn't recognize working tree"},{"location":"usage/","text":"Usage In order to enable your favourite work flow all major functions GitGutter has to offer are available via Main Menu Command Palette Key Bindings Command Palette Open the command palette via Main > Tools > Command Palette \u2026 or key binding Ctrl + Shift + P for Windows/Linux or \u2318 + \u21e7 + P for Mac OS Start typing GitGutter: Select one of the listed commands with the keyboard and press Enter . Disable Evaluation GitGutter tries best it can to decide automatically when to keep quiet . To manually disable GitGutter for a certain View use: Control Description Menu Main > View > GitGutter > Enabled for View Compare Against \u2026 GitGutter compares the working copy against the HEAD commit of the checked out branch by default. To temporarily change the compare target for the whole repository use: Control Description Menu Main > View > GitGutter > Compare Against <target> Command Palette GitGutter: Compare Against <target> Key Bindings Linux/Windows Ctrl + Shift + Alt + c, <key> Key Bindings OSX \u2318 + \u21e7 + \u2325 + c, <key> When using key bindings press one of the following keys after Ctrl + Shift + Alt + c to change the compare target. <key> <target> h HEAD b branch t tag c commit f file commit ( current file's history ) o origin ( @{upstream} ) Show Diff Popup The Diff Popup appears by hovering the mouse over the gutter area of Sublime Text or can be called from command palette or via a key binding. \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ Control Description Mouse Hover the gutter area of a changed line Menu Main > View > GitGutter > Diff Popup Command Palette GitGutter: Show Diff Popup Key Bindings Linux/Windows Ctrl + Shift + Alt + c, Ctrl + D Key Bindings OSX \u2318 + \u21e7 + \u2325 + c, \u2318 + D Show Line Annotation The Line Annotation appears by moving the caret to a new line by default or can be called from command palette or via a key binding. \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ Control Description Mouse Hover the gutter area of a changed line Menu Main > View > GitGutter > Show Line Annotation Command Palette GitGutter: Show Line Annotation Key Bindings Linux/Windows Ctrl + Shift + Alt + c, Ctrl + B Key Bindings OSX \u2318 + \u21e7 + \u2325 + c, \u2318 + B Goto Change The commands are used to quickly navigate between modifications. The \"next_prev_change_wrap\" setting controls whether to continue at document boundaries or not. The default step size of 1 can be customized by command arguments. You'd need to create your own custom key bindings to make use of it. Previous Change Control Description Menu Main > Goto > Goto Previous Change Command Palette GitGutter: Goto Previous Change Diff Popup \u2191 toolbar button Key Bindings Linux/Windows Ctrl + Shift + Alt + k Key Bindings OSX \u2318 + \u21e7 + \u2325 + k Next Change Control Description Menu Main > Goto > Goto Next Change Command Palette GitGutter: Goto Next Change Diff Popup \u2193 toolbar button Key Bindings Linux/Windows Ctrl + Shift + Alt + j Key Bindings OSX \u2318 + \u21e7 + \u2325 + j Copy Content from Commit The command copies the committed content of the changed hunk under the first cursor to the clipboard. The default key binding for this command is: Control Description Menu Main > Edit > Copy Content from Commit Command Palette GitGutter: Copy Content from Commit Diff Popup \u2398 toolbar button Key Bindings Linux/Windows Ctrl + Shift + c Key Bindings OSX \u2318 + \u21e7 c Revert Change to Commit The command reverts the text under the first cursor to the state in git. The default key binding for this command is: Control Description Menu Main > Edit > Revert Change to Commit Command Palette GitGutter: Revert Change to Commit Diff Popup \u27f2 toolbar button Key Bindings Linux/Windows Ctrl + Shift + Alt + z Key Bindings OSX \u2318 + \u21e7 + \u2325 + z","title":"Basic Usage"},{"location":"usage/#usage","text":"In order to enable your favourite work flow all major functions GitGutter has to offer are available via Main Menu Command Palette Key Bindings Command Palette Open the command palette via Main > Tools > Command Palette \u2026 or key binding Ctrl + Shift + P for Windows/Linux or \u2318 + \u21e7 + P for Mac OS Start typing GitGutter: Select one of the listed commands with the keyboard and press Enter .","title":"Usage"},{"location":"usage/#disable-evaluation","text":"GitGutter tries best it can to decide automatically when to keep quiet . To manually disable GitGutter for a certain View use: Control Description Menu Main > View > GitGutter > Enabled for View","title":"Disable Evaluation"},{"location":"usage/#compare-against","text":"GitGutter compares the working copy against the HEAD commit of the checked out branch by default. To temporarily change the compare target for the whole repository use: Control Description Menu Main > View > GitGutter > Compare Against <target> Command Palette GitGutter: Compare Against <target> Key Bindings Linux/Windows Ctrl + Shift + Alt + c, <key> Key Bindings OSX \u2318 + \u21e7 + \u2325 + c, <key> When using key bindings press one of the following keys after Ctrl + Shift + Alt + c to change the compare target. <key> <target> h HEAD b branch t tag c commit f file commit ( current file's history ) o origin ( @{upstream} )","title":"Compare Against ..."},{"location":"usage/#show-diff-popup","text":"The Diff Popup appears by hovering the mouse over the gutter area of Sublime Text or can be called from command palette or via a key binding. \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ Control Description Mouse Hover the gutter area of a changed line Menu Main > View > GitGutter > Diff Popup Command Palette GitGutter: Show Diff Popup Key Bindings Linux/Windows Ctrl + Shift + Alt + c, Ctrl + D Key Bindings OSX \u2318 + \u21e7 + \u2325 + c, \u2318 + D","title":"Show Diff Popup"},{"location":"usage/#show-line-annotation","text":"The Line Annotation appears by moving the caret to a new line by default or can be called from command palette or via a key binding. \u24d8 requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+ Control Description Mouse Hover the gutter area of a changed line Menu Main > View > GitGutter > Show Line Annotation Command Palette GitGutter: Show Line Annotation Key Bindings Linux/Windows Ctrl + Shift + Alt + c, Ctrl + B Key Bindings OSX \u2318 + \u21e7 + \u2325 + c, \u2318 + B","title":"Show Line Annotation"},{"location":"usage/#goto-change","text":"The commands are used to quickly navigate between modifications. The \"next_prev_change_wrap\" setting controls whether to continue at document boundaries or not. The default step size of 1 can be customized by command arguments. You'd need to create your own custom key bindings to make use of it.","title":"Goto Change"},{"location":"usage/#previous-change","text":"Control Description Menu Main > Goto > Goto Previous Change Command Palette GitGutter: Goto Previous Change Diff Popup \u2191 toolbar button Key Bindings Linux/Windows Ctrl + Shift + Alt + k Key Bindings OSX \u2318 + \u21e7 + \u2325 + k","title":"Previous Change"},{"location":"usage/#next-change","text":"Control Description Menu Main > Goto > Goto Next Change Command Palette GitGutter: Goto Next Change Diff Popup \u2193 toolbar button Key Bindings Linux/Windows Ctrl + Shift + Alt + j Key Bindings OSX \u2318 + \u21e7 + \u2325 + j","title":"Next Change"},{"location":"usage/#copy-content-from-commit","text":"The command copies the committed content of the changed hunk under the first cursor to the clipboard. The default key binding for this command is: Control Description Menu Main > Edit > Copy Content from Commit Command Palette GitGutter: Copy Content from Commit Diff Popup \u2398 toolbar button Key Bindings Linux/Windows Ctrl + Shift + c Key Bindings OSX \u2318 + \u21e7 c","title":"Copy Content from Commit"},{"location":"usage/#revert-change-to-commit","text":"The command reverts the text under the first cursor to the state in git. The default key binding for this command is: Control Description Menu Main > Edit > Revert Change to Commit Command Palette GitGutter: Revert Change to Commit Diff Popup \u27f2 toolbar button Key Bindings Linux/Windows Ctrl + Shift + Alt + z Key Bindings OSX \u2318 + \u21e7 + \u2325 + z","title":"Revert Change to Commit"}]}